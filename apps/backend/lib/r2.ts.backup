import { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3'
import { getSignedUrl } from '@aws-sdk/s3-request-presigner'

// Initialize R2 client with proper configuration for Cloudflare R2
let r2Client: S3Client

function initializeR2Client(): S3Client {
  // Validate environment variables
  const requiredEnvVars = ['R2_ENDPOINT', 'R2_ACCESS_KEY_ID', 'R2_SECRET_ACCESS_KEY']
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName])
  
  if (missingVars.length > 0) {
    throw new Error(`Missing required R2 environment variables: ${missingVars.join(', ')}`)
  }

  // Clean up environment variables to remove any extra quotes or whitespace
  const cleanAccessKeyId = process.env.R2_ACCESS_KEY_ID!.trim().replace(/^["']|["']$/g, '')
  const cleanSecretAccessKey = process.env.R2_SECRET_ACCESS_KEY!.trim().replace(/^["']|["']$/g, '')
  const cleanEndpoint = process.env.R2_ENDPOINT!.trim().replace(/^["']|["']$/g, '')

  console.log('ðŸ”§ R2 Configuration:')
  console.log('   Access Key ID length:', cleanAccessKeyId.length)
  console.log('   Secret Access Key length:', cleanSecretAccessKey.length)
  console.log('   Endpoint:', cleanEndpoint)

  return new S3Client({
    region: 'auto',
    endpoint: `https://${cleanEndpoint}`,
    credentials: {
      accessKeyId: cleanAccessKeyId,
      secretAccessKey: cleanSecretAccessKey,
    },
    // Disable path-style URLs for R2 compatibility
    forcePathStyle: false,
    // Use virtual hosted-style URLs
    useAccelerateEndpoint: false,
    // Disable global bucket endpoints
    useDualstackEndpoint: false,
  })
}

// Lazy initialization of R2 client
function getR2Client(): S3Client {
  if (!r2Client) {
    r2Client = initializeR2Client()
  }
  return r2Client
}

// Clean environment variables for bucket configuration
const BUCKET_NAME = process.env.R2_BUCKET_NAME!.trim().replace(/^["']|["']$/g, '')
const PUBLIC_URL = process.env.R2_PUBLIC_URL!.trim().replace(/^["']|["']$/g, '')

export interface UploadOptions {
  contentType?: string
  metadata?: Record<string, string>
}

export class R2Service {
  /**
   * Upload content to R2
   */
  static async uploadContent(
    key: string,
    content: string | Buffer,
    options: UploadOptions = {}
  ): Promise<string> {
    try {
      const client = getR2Client()
      const command = new PutObjectCommand({
        Bucket: BUCKET_NAME,
        Key: key,
        Body: content,
        ContentType: options.contentType || 'text/plain',
        Metadata: options.metadata,
        // R2 doesn't support ACLs - objects are public via bucket settings
      })

      await client.send(command)

      // Return public URL
      return `${PUBLIC_URL}/${key}`
    } catch (error) {
      console.error('Error uploading to R2:', error)
      throw new Error('Failed to upload content')
    }
  }

  /**
   * Get content from R2
   */
  static async getContent(key: string): Promise<string> {
    try {
      const client = getR2Client()
      const command = new GetObjectCommand({
        Bucket: BUCKET_NAME,
        Key: key,
      })

      const response = await client.send(command)
      const content = await response.Body?.transformToString()

      if (!content) {
        throw new Error('Content not found')
      }

      return content
    } catch (error) {
      console.error('Error fetching from R2:', error)
      throw new Error('Failed to fetch content')
    }
  }

  /**
   * Delete content from R2
   */
  static async deleteContent(key: string): Promise<void> {
    try {
      const client = getR2Client()
      const command = new DeleteObjectCommand({
        Bucket: BUCKET_NAME,
        Key: key,
      })

      await client.send(command)
    } catch (error) {
      console.error('Error deleting from R2:', error)
      throw new Error('Failed to delete content')
    }
  }

  /**
   * Generate a signed URL for temporary access
   */
  static async getSignedUrl(key: string, expiresIn: number = 3600): Promise<string> {
    try {
      const client = getR2Client()
      const command = new GetObjectCommand({
        Bucket: BUCKET_NAME,
        Key: key,
      })

      return await getSignedUrl(client, command, { expiresIn })
    } catch (error) {
      console.error('Error generating signed URL:', error)
      throw new Error('Failed to generate signed URL')
    }
  }

  /**
   * Generate content key for chapters
   */
  static generateChapterKey(storyId: string, chapterNumber: number): string {
    return `stories/${storyId}/chapters/${chapterNumber}.json`
  }

  /**
   * Generate content key for story metadata
   */
  static generateStoryKey(storyId: string): string {
    return `stories/${storyId}/metadata.json`
  }
}
