name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - production

env:
  NODE_VERSION: '18'

jobs:
  # 🧪 Pre-deployment Tests
  pre-deploy-tests:
    name: 🧪 Pre-deployment Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run quick test suite
        run: npm run test:quick || true

      - name: 🏗️ Verify builds
        run: |
          npm run build
          echo "✅ All builds successful"

  # 🚀 Deploy Frontend
  deploy-frontend:
    name: 🚀 Deploy Frontend
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    environment: ${{ github.event.inputs.environment || 'testnet' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build frontend
        run: |
          cd apps/frontend
          npm run build

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
          working-directory: ./apps/frontend
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

  # 🚀 Deploy Backend
  deploy-backend:
    name: 🚀 Deploy Backend
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    environment: ${{ github.event.inputs.environment || 'testnet' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build backend
        run: |
          cd apps/backend
          npm run build

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
          working-directory: ./apps/backend
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

  # 🧪 Post-deployment Tests
  post-deploy-tests:
    name: 🧪 Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⏳ Wait for deployment
        run: sleep 30

      - name: 🌐 Test deployed services
        run: |
          environment="${{ github.event.inputs.environment || 'testnet' }}"
          if [ "$environment" = "production" ]; then
            TEST_ENV=production npm run test:integration
          else
            TEST_ENV=testnet npm run test:integration
          fi

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.environment || 'testnet' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ✅ Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ✅ Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: $([ $? -eq 0 ] && echo "✅ Passed" || echo "⚠️ Some issues")" >> $GITHUB_STEP_SUMMARY

  # 📢 Notification
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [post-deploy-tests]
    if: always()
    steps:
      - name: 📢 Deployment notification
        run: |
          status="${{ needs.post-deploy-tests.result }}"
          environment="${{ github.event.inputs.environment || 'testnet' }}"
          
          if [ "$status" = "success" ]; then
            echo "✅ Deployment to $environment successful!"
          else
            echo "❌ Deployment to $environment had issues. Check logs."
          fi