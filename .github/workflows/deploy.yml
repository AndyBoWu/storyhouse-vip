name: ðŸš€ Deploy to Vercel (Manual)

on:
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend'
        required: false
        default: true
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_FRONTEND: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
  VERCEL_PROJECT_ID_BACKEND: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}

jobs:
  # Job to detect which apps have changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      shared-changed: ${{ steps.changes.outputs.shared }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/shared/**'
            backend:
              - 'apps/backend/**'
              - 'packages/shared/**'
            shared:
              - 'packages/shared/**'

  # Build and deploy frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'workflow_dispatch' && inputs.deploy_frontend
    environment: 
      name: frontend-production
      url: ${{ steps.deploy.outputs.url }}
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache builds
        uses: actions/cache@v4
        with:
          path: |
            apps/frontend/.next/cache
            apps/frontend/.next/standalone
            packages/shared/dist
            packages/shared/tsconfig.tsbuildinfo
          key: build-frontend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            build-frontend-${{ runner.os }}-

      - name: Build Frontend (with dependencies)
        run: |
          npm install
          npm run build:frontend

      - name: Debug Environment Variables
        run: |
          echo "=== DEBUGGING VERCEL CONFIGURATION ==="
          echo "VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}"
          echo "VERCEL_PROJECT_ID_FRONTEND: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}"
          echo "Working directory: $(pwd)"
          echo "Environment VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID"
          
      - name: Create New Vercel Project (Frontend)
        run: |
          cd apps/frontend
          
          # Remove existing .vercel directory to force recreation
          rm -rf .vercel
          
          # Link to existing project or create new one
          echo "Linking to frontend project..."
          npx vercel link --yes --token ${{ secrets.STORYHOUSE_GHA_VERCEL }} --scope ${{ secrets.VERCEL_ORG_ID }} || echo "Link failed, will create new project during deploy"
          
          echo "=== Current .vercel/project.json ==="
          cat .vercel/project.json || echo "No project.json found"

      - name: Deploy to Vercel
        id: deploy
        run: |
          cd apps/frontend
          echo "=== DEPLOYING FRONTEND ==="
          echo "Current working directory: $(pwd)"
          
          # Deploy directly from the frontend directory
          npx vercel deploy --prod --token ${{ secrets.STORYHOUSE_GHA_VERCEL }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}

  # Build and deploy backend
  deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'workflow_dispatch' && inputs.deploy_backend
    environment: 
      name: backend-production
      url: ${{ steps.deploy.outputs.url }}
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache builds
        uses: actions/cache@v4
        with:
          path: |
            apps/backend/.next/cache
            apps/backend/.next/standalone
            packages/shared/dist
            packages/shared/tsconfig.tsbuildinfo
          key: build-backend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            build-backend-${{ runner.os }}-

      - name: Build Backend (with dependencies)
        run: |
          npm install
          npm run build:backend

      - name: Debug Environment Variables
        run: |
          echo "=== DEBUGGING BACKEND VERCEL CONFIGURATION ==="
          echo "VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}"
          echo "VERCEL_PROJECT_ID_BACKEND: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}"
          echo "Working directory: $(pwd)"
          echo "Environment VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID"
          
      - name: Create New Vercel Project (Backend)
        run: |
          cd apps/backend
          
          # Remove existing .vercel directory to force recreation
          rm -rf .vercel
          
          # Link to existing project or create new one
          echo "Linking to backend project..."
          npx vercel link --yes --token ${{ secrets.STORYHOUSE_GHA_VERCEL }} --scope ${{ secrets.VERCEL_ORG_ID }} || echo "Link failed, will create new project during deploy"
          
          echo "=== Current .vercel/project.json ==="
          cat .vercel/project.json || echo "No project.json found"

      - name: Deploy to Vercel
        id: deploy
        run: |
          cd apps/backend
          echo "=== DEPLOYING BACKEND ==="
          echo "Current working directory: $(pwd)"
          
          # Deploy directly from the backend directory
          npx vercel deploy --prod --token ${{ secrets.STORYHOUSE_GHA_VERCEL }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}

