name: ðŸš€ Deploy to Vercel (Manual/PR)

on:
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend'
        required: false
        default: true
        type: boolean
      production:
        description: 'Deploy to production (unchecked = preview)'
        required: false
        default: true
        type: boolean
  pull_request:
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - 'packages/shared/**'

jobs:
  # Job to detect which apps have changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      shared-changed: ${{ steps.changes.outputs.shared }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/shared/**'
            backend:
              - 'apps/backend/**'
              - 'packages/shared/**'
            shared:
              - 'packages/shared/**'

  # Deploy frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.deploy_frontend) ||
      (github.event_name == 'pull_request' && needs.detect-changes.outputs.frontend-changed == 'true')
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.production && 'frontend-production' || 'frontend-preview' }}
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache builds
        uses: actions/cache@v4
        with:
          path: |
            apps/frontend/.next/cache
            apps/frontend/.next/standalone
            packages/shared/dist
            packages/shared/tsconfig.tsbuildinfo
          key: build-frontend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            build-frontend-${{ runner.os }}-

      - name: Install root dependencies
        run: npm install

      - name: Build shared packages
        run: npm run build:shared

      - name: Install frontend dependencies
        run: npm install
        working-directory: apps/frontend

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Check shell environment
        run: |
          which sh || echo "sh not found"
          which bash || echo "bash not found"
          echo "Default shell: $SHELL"

      - name: Build Frontend with Next.js
        run: npm run build
        working-directory: apps/frontend

      - name: Clean and setup Vercel project
        run: |
          rm -rf .vercel
          echo "Setting up fresh Vercel project for CLI deployment..."
          echo "Working directory: $(pwd)"
          echo "Contents: $(ls -la)"
        working-directory: apps/frontend

      - name: Deploy to Vercel
        id: deploy
        run: |
          # Deploy from app directory, treating it as project root
          # Using explicit project ID to avoid path confusion
          url=$(vercel deploy ${{ (github.event_name == 'workflow_dispatch' && inputs.production) && '--prod' || '' }} --yes --token=${{ secrets.STORYHOUSE_GHA_VERCEL }} --scope team_BsORABKeULvzhE8sYWJSopdD)
          echo "preview-url=$url" >> $GITHUB_OUTPUT
        working-directory: apps/frontend

  # Deploy backend
  deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.deploy_backend) ||
      (github.event_name == 'pull_request' && needs.detect-changes.outputs.backend-changed == 'true')
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.production && 'backend-production' || 'backend-preview' }}
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache builds
        uses: actions/cache@v4
        with:
          path: |
            apps/backend/.next/cache
            apps/backend/.next/standalone
            packages/shared/dist
            packages/shared/tsconfig.tsbuildinfo
          key: build-backend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            build-backend-${{ runner.os }}-

      - name: Install root dependencies
        run: npm install

      - name: Build shared packages
        run: npm run build:shared

      - name: Bundle shared package with backend
        run: |
          echo "Copying built shared package to backend..."
          mkdir -p apps/backend/shared-bundle
          cp -r packages/shared/dist/* apps/backend/shared-bundle/
          cp packages/shared/package.json apps/backend/shared-bundle/
          echo "Fixing package.json paths for bundled package..."
          sed -i 's|"./dist/|"./|g' apps/backend/shared-bundle/package.json
          echo "Shared package bundled successfully"
          ls -la apps/backend/shared-bundle/

      - name: Install backend dependencies
        run: npm install
        working-directory: apps/backend

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Build Backend with Next.js
        run: npm run build
        working-directory: apps/backend

      - name: Clean and setup Vercel project
        run: |
          rm -rf .vercel
          echo "Setting up fresh Vercel project for CLI deployment..."
          echo "Working directory: $(pwd)"
          echo "Contents: $(ls -la)"
        working-directory: apps/backend

      - name: Deploy to Vercel
        id: deploy
        run: |
          # Deploy from app directory, treating it as project root  
          # Using explicit project ID to avoid path confusion
          url=$(vercel deploy ${{ (github.event_name == 'workflow_dispatch' && inputs.production) && '--prod' || '' }} --yes --token=${{ secrets.STORYHOUSE_GHA_VERCEL }} --scope team_BsORABKeULvzhE8sYWJSopdD)
          echo "preview-url=$url" >> $GITHUB_OUTPUT
        working-directory: apps/backend

